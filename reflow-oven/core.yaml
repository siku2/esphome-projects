substitutions:
  name: "reflow-oven"
  friendly_name: "Reflow Oven"
  long_press_min_length: "1s"
  long_press_max_length: "2s"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true
  project:
    name: "siku2.reflow-oven"
    version: "0.2.0"

logger:

api:

ota:
  - platform: esphome

wifi:
  ap:

binary_sensor:
  - id: bs_switch1
    name: "Switch1"
    platform: gpio
    pin:
      number: GPIO15
      ignore_strapping_warning: true
    on_click:
      - min_length: 20ms
        max_length: ${long_press_min_length}
        then:
          - lambda: |-
              switch (id(select_state).active_index().value_or(0)) {
                // back to idle when complete
                case 5: // Program Complete
                  id(select_state)->make_call()
                    .set_index(0) // Idle
                    .perform();
                  break;
                default:
                  break;
              }

      - min_length: ${long_press_min_length}
        max_length: ${long_press_max_length}
        then:
          - lambda: |-
              switch (id(select_state).active_index().value_or(0)) {
                // abort running program
                case 1: // Preheat
                case 2: // Ramp-up
                case 3: // Overshoot
                case 4: // Ramp-down
                case 7: // Program Run
                  id(select_state)->make_call()
                    .set_index(6) // Program Aborted
                    .perform();
                  break;
                // confirm selected program and go back to idle
                case 8: // Program Select
                  id(select_state)->make_call()
                    .set_index(0) // Idle
                    .perform();
                  break;
                default:
                  break;
              }

  - id: bs_switch0
    name: "Switch0"
    platform: gpio
    pin: GPIO20
    on_click:
      - min_length: 20ms
        max_length: ${long_press_min_length}
        then:
          - lambda: |-
              switch (id(select_state).active_index().value_or(0)) {
                // enter program select
                case 0: // Idle
                  id(select_state)->make_call()
                    .set_index(8) // Program Select
                    .perform();
                  break;
                // force program to start even when temperature is above min.
                case 7: // Program Run
                  id(select_state)->make_call()
                    .set_index(1) // Preheat
                    .perform();
                  break;
                // switch to next program in program select
                case 8: // Program Select
                  id(select_program)->make_call()
                    .select_next(true)
                    .perform();
                  break;
                default:
                  break;
              }

      - min_length: ${long_press_min_length}
        max_length: ${long_press_max_length}
        then:
          - lambda: |-
              switch (id(select_state).active_index().value_or(0)) {
                // confirm selected program and move to run
                case 0: // Idle
                  id(select_state)->make_call()
                    .set_index(7) // Program Run
                    .perform();
                  break;
                default:
                  break;
              }

display:
  - id: display_main
    platform: lcd_pcf8574
    dimensions: 20x4
    address: 0x27
    update_interval: never
    lambda: |-
      it.print("Hello World!");

i2c:
  id: i2c_main
  sda: GPIO21
  scl: GPIO22

light:
  - id: light_led
    name: "LED"
    platform: binary
    output: output_led

number:
  - id: number_tc_target
    name: "Target Temperature"
    unit_of_measurement: 째C
    device_class: temperature
    platform: template
    min_value: 0.0
    max_value: 300.0
    step: 1.0
    update_interval: never
    optimistic: true
    restore_value: false
    on_value: 
      then:
        - lambda: |-
            if (x > 0.0) {
              id(select_tc_state)->make_call()
                .set_index(2) // Relay
                .perform();
              id(script_tc_act)->execute();
            } else {
              id(select_tc_state)->make_call()
                .set_index(0) // Off
                .perform();
            }

  - id: number_prog_run_max_temp
    name: "Program Run Max Temperature"
    unit_of_measurement: 째C
    device_class: temperature
    platform: template
    min_value: 0.0
    max_value: 300.0
    step: 1.0
    update_interval: never
    optimistic: true
    restore_value: false

  - id: number_preheat_temp
    name: "Preheat Temperature"
    unit_of_measurement: 째C
    device_class: temperature
    platform: template
    min_value: 0.0
    max_value: 300.0
    step: 1.0
    update_interval: never
    optimistic: true
    restore_value: false

  - id: number_preheat_time
    name: "Preheat Temperature"
    unit_of_measurement: 째C
    device_class: temperature
    platform: template
    min_value: 0.0
    max_value: 300.0
    step: 1.0
    update_interval: never
    optimistic: true
    restore_value: false

output:
  - id: output_pwm
    platform: ledc
    pin: GPIO10

  - id: output_buzzer
    platform: ledc
    pin: GPIO17
    max_power: 0.23

  - id: output_led
    platform: gpio
    pin: GPIO23

script:
  # tc: stops all tc scripts and shuts down the heating elements
  - id: script_tc_off
    mode: restart
    then:
      - lambda: |-
          auto all_scripts = {
            id(script_tc_check_count),
            id(script_tc_triac_on),
            id(script_tc_relay_on),
            id(script_tc_act),
          };
          for (auto script : all_scripts) script->stop();
      - switch.turn_off: switch_rel1
      - output.turn_off: output_pwm

  # tc: waits for the count to be echoed, otherwise enters error state
  - id: script_tc_check_count
    mode: single
    then:
      - component.update: sensor_count
      - wait_until:
          condition:
            sensor.in_range:
              id: sensor_count
              above: 0
          timeout: 5s
      - if:
          condition:
            sensor.in_range:
              id: sensor_count
              above: 0
          else:
            # count not available -> error
            - select.set_index:
                id: select_tc_state
                index: 1 # Error

  # TODO: we probably want more than just to turn it on?
  # tc: turns on the triac with various checks, otherwise enters error state
  - id: script_tc_triac_on
    mode: single
    then:
      - switch.turn_off: switch_rel1
      - if:
          condition:
            sensor.in_range:
              id: sensor_ntc1
              above: 50
          then:
            # ntc1 > 50
            - output.turn_off: output_pwm
            - wait_until:
                # wait for ntc1 <= 50
                condition:
                  not:
                    sensor.in_range:
                      id: sensor_ntc1
                      above: 50
                timeout: 5s
      - if:
          condition:
            or:
              # ntc1 > 50
              - sensor.in_range:
                  id: sensor_ntc1
                  above: 50
              # ntc2 > 50
              - sensor.in_range:
                  id: sensor_ntc2
                  # technically this should be >= instead of >
                  above: 50
          then:
            - select.set_index:
                id: select_tc_state
                index: 1 # Error

      - output.turn_on: output_pwm
      - select.set_index:
          id: select_tc_state
          index: 3 # Triac
      - script.execute: script_tc_check_count
      - script.wait: script_tc_check_count

  # tc: turns on the relay and ensures the count is echoed, otherwise enters error state
  - id: script_tc_relay_on
    mode: single
    then:
      - output.turn_off: output_pwm
      - switch.turn_on: switch_rel1
      - select.set_index:
          id: select_tc_state
          index: 2 # Relay
      - script.execute: script_tc_check_count
      - script.wait: script_tc_check_count

  # tc: act
  #
  # triggers: [number_tc_target, sensor_temp_cs2, sensor_ntc1, sensor_ntc2]
  - id: script_tc_act
    mode: single
    then:
      - lambda: |-
          switch (id(select_tc_state).active_index().value_or(0)) {
            case 0: // Off
            case 1: // Error
              // stop early since we don't want to run
              id(script_tc_act)->stop();
              break;
            default:
              break;
          }
      - if:
          condition:
            lambda: |-
              return id(sensor_temp_cs2)->state > (id(number_tc_target)->state - 5.0);
          then:
            - script.execute: script_tc_triac_on
            - script.wait: script_tc_triac_on
          else:
            - script.execute: script_tc_relay_on
            - script.wait: script_tc_relay_on

  - id: script_buzzer
    mode: restart
    parameters:
      duration_ms: int
      count: int
    then:
      - repeat:
          count: !lambda return count;
          then:
            - switch.turn_on: switch_buzzer
            - delay: !lambda return duration_ms;
            - switch.turn_off: switch_buzzer
            - delay: 200ms

  - id: script_s_abort
    mode: single
    then:
      # stop the temperature controller
      - number.set:
          id: number_tc_target
          value: 0
      - light.turn_on: light_led
      - component.update: display_main
      - script.execute:
          id: script_buzzer
          duration_ms: 3000
          count: 1
      - script.wait: script_buzzer
      - select.set_index:
          id: select_state
          index: 0 # Idle

  - id: script_s_prog_complete
    mode: single
    then:
      # stop the temperature controller
      - number.set:
          id: number_tc_target
          value: 0
      - script.execute:
          id: script_buzzer
          duration_ms: 500
          count: 3
      - light.turn_off: light_led

  - id: script_s_prog_run
    mode: single
    then:
      - script.execute:
          id: script_buzzer
          duration_ms: 500
          count: 1
      - light.turn_on:
          id: light_led
          effect: blink
      - component.update: display_main
      - wait_until:
          condition:
            lambda: |-
              float current_temp = id(sensor_temp_cs2)->state;
              float max_temp = id(number_prog_run_max_temp)->state;
              return current_temp <= max_temp;
      - select.set_index:
          id: select_state
          index: 1 # Preheat

  - id: script_s_preheat
    mode: single
    then:
      - number.set:
          id: number_tc_target
          value: !lambda return id(number_preheat_temp)->state;
      # TODO
      - delay: 60s
      - select.set_index:
          id: select_state
          index: 5 # Program Complete


select:
  - id: select_tc_state
    platform: template
    name: "Temperature Controller Status"
    optimistic: true
    update_interval: never
    options:
      - "Off" #        0
      - "Error" #      1
      - "Relay" #      2
      - "Triac" #      3
      - "Triac Cool" # 4
    on_value:
      then:
        - lambda: |-
            switch (i) {
              case 0: // Off
              case 1: // Error
                id(script_tc_off)->execute();
                break;
              default:
                break;
            }

  - id: select_state
    platform: template
    name: "State"
    optimistic: true
    update_interval: never
    options:
      - "Idle" #             0
      - "Preheat" #          1
      - "Ramp-up" #          2
      - "Overshoot" #        3
      - "Ramp-down" #        4
      - "Program Complete" # 5
      - "Program Aborted" #  6
      - "Program Run" #      7
      - "Program Select" #   8
    on_value:
      then:
        - lambda: |-
            // stop all currently running state scripts first
            auto all_scripts = {
              id(script_s_abort),
              id(script_s_prog_run),
              id(script_s_preheat),
            };
            for (auto script : all_scripts) script->stop();
            // then decide what to do
            switch (i) {
              case 1: // Preheat
                id(script_s_preheat)->execute();
                break;
              case 6: // Program Aborted
                id(script_s_abort)->execute();
                break;
              case 7: // Program Run
                id(script_s_prog_run)->execute();
                break;
              default:
                break;
            }

  - id: select_program
    platform: template
    name: "Program Preset"
    optimistic: true
    update_interval: never
    options:
      - "Custom" #    0
      - "Lead Free" # 1
    on_value:
      then:
        - lambda: |-
            switch (i) {
              default:
                break;
            }
        - component.update: display_main

sensor:
  - id: sensor_temp_cs2
    platform: max6675
    name: "PCB Temperature (CS2)"
    spi_id: spi_main
    cs_pin: GPIO18
    update_interval: 5s
    on_value:
      then:
        - script.execute: script_tc_act

  - id: sensor_temp_cs3
    platform: max6675
    name: "Oven Temperature (CS3)"
    spi_id: spi_main
    cs_pin: GPIO19
    update_interval: 5s
    on_value:
      then:
        # abort if the oven gets too hot
        - lambda: |-
            if (x > 300.0) {
              id(select_state)->make_call()
                .set_index(6) // Program Aborted
                .perform();
            }

  - id: sensor_count
    name: "COUNT"
    platform: pulse_counter
    pin: GPIO11
    update_interval: 5s

  - id: sensor_ntc1
    name: "Triac Temperature (NTC1)"
    platform: ntc
    sensor: sensor_ntc1_resistance
    calibration:
      b_constant: 3892
      reference_temperature: 25째C
      reference_resistance: 3kOhm
    on_value:
      then:
        - script.execute: script_tc_act

  - id: sensor_ntc1_resistance
    platform: resistance
    sensor: sensor_ntc1_adc
    configuration: DOWNSTREAM
    resistor: 4.7kOhm

  - id: sensor_ntc1_adc
    platform: adc
    pin: GPIO4
    attenuation: 12db
    update_interval: 5s

  - id: sensor_ntc2
    name: "Case Temperature (NTC2)"
    platform: ntc
    sensor: sensor_ntc2_resistance
    calibration:
      b_constant: 3892
      reference_temperature: 25째C
      reference_resistance: 3kOhm
    on_value:
      then:
        - script.execute: script_tc_act

  - id: sensor_ntc2_resistance
    platform: resistance
    sensor: sensor_ntc2_adc
    configuration: UPSTREAM
    resistor: 4.7kOhm

  - id: sensor_ntc2_adc
    platform: adc
    pin: GPIO5
    attenuation: 12db
    update_interval: 5s

spi:
  id: spi_main
  clk_pin: GPIO6
  mosi_pin: GPIO7
  miso_pin: GPIO2

switch:
  - id: switch_display_backlight
    name: "Display Backlight"
    entity_category: config
    platform: template
    optimistic: true
    assumed_state: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - lambda: |-
          if (id(display_main).is_ready()) {
            id(display_main).backlight();
          }
    turn_off_action:
      - lambda: |-
          if (id(display_main).is_ready()) {
            id(display_main).no_backlight();
          }

  - id: switch_buzzer
    name: "BUZZER"
    platform: output
    output: output_buzzer

  - id: switch_rel1
    name: "REL1"
    platform: gpio
    pin: GPIO3
